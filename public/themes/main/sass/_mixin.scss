/**File sass css khai báo các mixin cho ứng dụng**/

@mixin font-face($font-family, $url) {
    @font-face {
        font-family: "#{$font-family}";
        src: url("../#{$url}.eot");
        src: url("../#{$url}.eot?#iefix") format("embedded-opentype"),
        url("../#{$url}.woff") format("woff"),
        url("../#{$url}.ttf") format("truetype"),
        url("../#{$url}.svg") format("svg");
        font-weight: normal;
        font-style: normal;
    }
}

@mixin prefix($property, $value, $vendors: webkit moz ms o, $default: true) {
    @if $vendors {
        @each $vendor in $vendors {
            #{"-" + $vendor + "-" + $property}: #{$value};
        }
    }

    @if $default {
        #{$property}: #{$value};
    }
}

@mixin transition($parameters...) {
    -webkit-transition: $parameters;
    -moz-transition: $parameters;
    -ms-transition: $parameters;
    transition: $parameters;
}

/**Thiết lập position absolute cho phần tử theo vị trí**/
@mixin centerAbsolute($pos) {
    position: absolute;

    @if $pos=="both" {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    @else if $pos=="left" {
        left: 50%;
        transform: translateX(-50%);
    }

    @else if $pos=="top" {
        top: 50%;
        transform: translateY(-50%);
    }
}

@mixin minWidth($breakpoint) {
    @media only screen and (min-width: $breakpoint + "px") {
        @content;
    }
}

@mixin maxWidth($breakpoint) {
    @media only screen and (max-width: $breakpoint + "px") {
        @content;
    }
}

@mixin maxHeight($breakpoint) {
    @media only screen and (max-height: $breakpoint + "px") {
        @content;
    }
}

@mixin responsive($max, $min) {
    @media only screen and (max-width: $max + "px") and (min-width: $min + "px") {
        @content;
    }
}

@mixin centerBlock {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin fontSize($size, $base: 16) {
    font-size: $size * 1px; // fallback for old browsers
    font-size: ($size / $base) * 1rem;
}

@mixin gradient($start-color, $end-color, $orientation) {
    background: $start-color;

    @if $orientation=="vertical" {
        background: -webkit-linear-gradient(top, $start-color, $end-color);
        background: linear-gradient(to bottom, $start-color, $end-color);
    }

    @else if $orientation=="horizontal" {
        background: -webkit-linear-gradient(left, $start-color, $end-color);
        background: linear-gradient(to right, $start-color, $end-color);
    }

    @else {
        background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
        background: radial-gradient(ellipse at center, $start-color, $end-color);
    }
}

@mixin pseudo($display: block, $pos: absolute, $content: "") {
    content: $content;
    display: $display;
    position: $pos;
}

@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false) {
    @include pseudo($pos: $position);
    width: 0;
    height: 0;

    @if $round {
        border-radius: 3px;
    }

    @if $direction==down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round($size / 2.5);
    }

    @else if $direction==up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        margin-bottom: 0 - round($size / 2.5);
    }

    @else if $direction==right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        margin-right: -$size;
    }

    @else if $direction==left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}

@mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin border-hover-red {
    &:before {
        content: "";
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 0;
        background-color: $red;
        @include transition(all linear 0.15s);
    }

    &:hover {
        &:before {
            height: 3px;
            @include transition(all linear 0.15s);
        }
    }
}

@mixin border-hover-white {
    &:before {
        content: "";
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 0;
        background-color: white;
        @include transition(all linear 0.15s);
    }

    &:hover {
        &:before {
            height: 3px;
            @include transition(all linear 0.15s);
        }
    }
}

@mixin pagination {
    bottom: 0;
    width: 100%;

    .swiper-pagination-bullet {
        margin-right: 15px;
        width: 10px;
        height: 10px;
        background-color: $red;
        position: relative;

        &:after {
            content: "";
            position: absolute;
            top: 50%;
            left: 50%;
            width: calc(100% + 3px);
            height: calc(100% + 3px);
            transform: translate(-50%, -50%);
            border: 1px solid transparent;
            border-radius: 50%;
            @include transition(all linear 0.3s);
        }
    }

    .swiper-pagination-bullet-active {
        &:after {
            border-color: $red;
            @include transition(all linear 0.3s);
        }
    }
}

@mixin flex($value) {
    width: 100%;
    max-width: $value;
    flex: 0 $value;
}

@mixin hover-background() {
    -webkit-transition: background 700ms;
    /* For Safari 3.0 to 6.0 */
    transition: background 700ms;
    /* For modern browsers */
}

@mixin pulse {
    animation: pulse;
    animation-duration: 600ms;
    animation-iteration-count: infinite;
}

@mixin animation($name, $duration, $count : 1) {
    animation: $name;
    animation-duration: $duration;
    animation-iteration-count: $count;
}
